# Template file for 'anki'
pkgname=anki
version=2.1.65
revision=1
# XXX "The Rust version pinned in rust-toolchain.toml will be automatically downloaded if not yet installed"
build_style=cargo
hostmakedepends="pkg-config protobuf nodejs ninja yarn git tar"
makedepends="libzstd-devel nodejs-devel openssl-devel"
depends="python3-PyQt5-webengine python3-requests python3-SQLAlchemy
 python3-PyAudio python3-mpv python3-Markdown python3-send2trash
 python3-BeautifulSoup4 python3-decorator python3-jsonschema"
short_desc="Spaced repetition flashcard program"
maintainer="Orphaned <orphan@voidlinux.org>"
license="AGPL-3.0-or-later"
homepage="https://apps.ankiweb.net"
changelog="https://apps.ankiweb.net/docs/changes.html"
_i18n_git=331f05bf02563582164755c68db1ba188224b202
_ftl_git=1fbf87bb8a7d441482e79b3b8c2e06479e9fa978
distfiles="https://github.com/ankitects/anki/archive/refs/tags/$version.tar.gz
 https://github.com/ankitects/anki-core-i18n/archive/${_i18n_git}.tar.gz>anki-core-i18n-${_i18n_git}.tar.gz
 https://github.com/ankitects/anki-desktop-ftl/archive/${_ftl_git}.tar.gz>anki-desktop-ftl-${_ftl_git}.tar.gz"
checksum="ca1c37e8e32bec02f09421bd29ac67253e4039e705bf9fba919918c4559b48e8
fec92648b650a99872a38d6487cd1765d1fc46962eb14018343ab81b4de21ffe
85c6f4570b66cac1a021eb3efb7e69868d8c9b130b5c6171d459dd5bfbde321a
"
# "Python, node and protoc are downloaded as part of the build. You can optionally define PYTHON_BINARY, NODE_BINARY and/or PROTOC_BINARY to use locally-installed versions instead."
export PYTHON_BINARY=/usr/bin/python3
export PROTOC_BINARY=/usr/bin/protoc
export NODE_BINARY=/usr/bin/node
export RUST_BACKTRACE=full # XXX only to debug those "helpful" error messages ("file not found" -- WHAT FILE?!?!?!)

python_version=3

pre_patch() {
	# aren't git submodules lovely?
	# anki$version now contains anki$version + i18n + ...
	( cd anki-"$version" && tar cpf - . ) | tar xpf - && rm -fr anki-"$version"
	( cd anki-core-i18n-"$_i18n_git" && tar cpf - . ) | ( cd ftl/core-repo && tar xpf - )
	( cd anki-desktop-ftl-"$_ftl_git" && tar cpf - . ) | ( cd ftl/qt-repo && tar xpf - )
}

do_build() {
	#cargo auditable build --release --locked --target ${RUST_TARGET} -p runner
	#runner hardcodes a rust invocation...
	cargo auditable build --locked -p runner
}

post_build() {
	git config --global user.email "you@example.com"
	git config --global user.name "Your Name"
	git init -q
	git add Cargo.toml
	git commit -a -q -m "runner *needs* a git repository with at least one commit"
	#./target/${RUST_TARGET}/release/runner build wheels
	./target/debug/runner build wheels
}

post_install() {
	vlicense LICENSE
}
